plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'eclipse'
    id 'jacoco'
}

repositories {
    // Use maven central for resolving dependencies.
    mavenCentral()

    // DBIS Archiva
    maven {
        url "https://archiva.dbis.rwth-aachen.de:9911/repository/internal/"
    }
}


dependencies {
    // Use JUnit test framework.
    testImplementation "junit:junit:4.13.2"
    
    // las2peer bundle which is not necessary in the runtime path
    // compileOnly will be moved into the lib dir afterwards
    compileOnly "i5:las2peer-bundle:${project.property('core.version')}"

    // Add service dependencies here
    // example:
    // implementation "net.minidev:json-smart:1.3.1"
}

configurations {
    // This ensures las2peer is available in the tests, but won't be bundled
    testImplementation.extendsFrom compileOnly
}

jar {
    manifest {
        attributes "Main-Class": "${project.property('service.name')}.${project.property('service.class')}"
        attributes "Library-Version": "${project.property('service.version')}"
        attributes "Library-SymbolicName": "${project.property('service.name')}"
    }

    from { (configurations.runtimeClasspath).collect { it.isDirectory() ? it : zipTree(it) } } {
        // Exclude signatures to be able to natively bundle signed jars
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
}

application {
    // Define the main class for the application.
    mainClass = "${project.property('service.name')}.${project.property('service.class')}"

    group = "${project.property('service.name')}"
    archivesBaseName = group

    version = "${project.property('service.version')}"
    mainClass.set("i5.las2peer.tools.L2pNodeLauncher")
    sourceCompatibility = "${project.property('java.version')}"
    targetCompatibility = "${project.property('java.version')}"
}

// put all .jar files into export/jars folder
tasks.withType(Jar) {
    destinationDirectory = file("$projectDir/export/jars")
}

javadoc {
    destinationDir = file("$projectDir/export/doc")
}

build.dependsOn "javadoc"

compileJava {
    dependsOn "copyMain"
}

compileTestJava {
    dependsOn "copyTest"
}

// Copies .xml files into build directory
task copyMain(type: Copy) {
    from "src/main/java"
    include "**/*.xml"
    into "$buildDir/classes/java/main"
}

// Copies .xml files into build directory
task copyTest(type: Copy) {
    from "src/test/java"
    include "**/*.xml"
    into "$buildDir/classes/java/test"
}

// These two tasks restore the build and runtime environment used
// in the ant environment
task copyJar(type: Copy) {
    from jar // here it automatically reads jar file produced from jar task
    into "$rootDir/service"
}

task copyToLib(type: Copy) {
    from configurations.compileClasspath
    into "$rootDir/lib"
}

build.dependsOn copyJar
build.dependsOn copyToLib

task startscripts {
    new File("$rootDir/bin", "start_network.sh").text = """#!/bin/bash

# this script is autogenerated by 'gradle startscripts'
# it starts a las2peer node providing the service '${project.property('service.name')}.${project.property('service.class')}' of this project
# pls execute it from the root folder of your deployment, e. g. ./bin/start_network.sh

java -cp "lib/*" --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED i5.las2peer.tools.L2pNodeLauncher --port 9011 --service-directory service uploadStartupDirectory startService\\(\\'${project.property('service.name')}.${project.property('service.class')}@${project.property('service.version')}\\'\\) startWebConnector interactive
""" 
    new File("$rootDir/bin", "start_network.bat").text = """:: this script is autogenerated by 'gradle startscripts'
:: it starts a las2peer node providing the service '${project.property('service.name')}.${project.property('service.class')}' of this project
:: pls execute it from the bin folder of your deployment by double-clicking on it

%~d0
cd %~p0
cd ..
set BASE=%CD%
set CLASSPATH="%BASE%/lib/*;"
set ADD_OPENS=--add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED

java -cp %CLASSPATH% %ADD_OPENS% i5.las2peer.tools.L2pNodeLauncher --port 9011 --service-directory service uploadStartupDirectory startService('${project.property('service.name')}.${project.property('service.class')}@${project.property('service.version')}') startWebConnector interactive

pause
"""
}

build.dependsOn "startscripts"

def startup = "$rootDir/etc/startup"
def userAgent1Path = "${startup}/agent-user-${project.property('las2peer_user1.name')}.xml"
def userAgent2Path = "${startup}/agent-user-${project.property('las2peer_user2.name')}.xml"
def userAgent3Path = "${startup}/agent-user-${project.property('las2peer_user3.name')}.xml"
def passphrasesPath = "${startup}/passphrases.txt"

task generateUserAgent1 {
    dependsOn "jar"

    onlyIf { !(new File(userAgent1Path).exists()) }

    doLast {
        tasks.create("generateUserAgent1Help", JavaExec) {
            println "Writing User Agent xml to ${userAgent1Path}"

            main = "i5.las2peer.tools.UserAgentGenerator"
            classpath = sourceSets.main.compileClasspath
            args "${project.property('las2peer_user1.password')}", "${project.property('las2peer_user1.name')}", "${project.property('las2peer_user1.email')}"
            mkdir "${startup}"
            standardOutput new FileOutputStream(userAgent1Path)
        }.exec()
    }
}

task generateUserAgent2 {
    dependsOn "jar"

    onlyIf { !(new File(userAgent2Path).exists()) }

    doLast {
        tasks.create("generateUserAgent2Help", JavaExec) {
            println "Writing User Agent xml to ${userAgent2Path}"

            main = "i5.las2peer.tools.UserAgentGenerator"
            classpath = sourceSets.main.compileClasspath
            args "${project.property('las2peer_user2.password')}", "${project.property('las2peer_user2.name')}", "${project.property('las2peer_user2.email')}"
            mkdir "${startup}"
            standardOutput new FileOutputStream(userAgent2Path)
        }.exec()
    }
}

task generateUserAgent3 {
    dependsOn "jar"

    onlyIf { !(new File(userAgent3Path).exists()) }

    doLast {
        tasks.create("generateUserAgent3Help", JavaExec) {
            println "Writing User Agent xml to ${userAgent3Path}"

            main = "i5.las2peer.tools.UserAgentGenerator"
            classpath = sourceSets.main.compileClasspath
            args "${project.property('las2peer_user3.password')}", "${project.property('las2peer_user3.name')}", "${project.property('las2peer_user3.email')}"
            mkdir "${startup}"
            standardOutput new FileOutputStream(userAgent3Path)
        }.exec()
    }
}

// generate example user agents
task generateAgents {
    description "Generate example user agents"
    dependsOn "generateUserAgent1"
    dependsOn "generateUserAgent2"
    dependsOn "generateUserAgent3"

    doLast {
        new File(passphrasesPath).text = """agent-user-${project.property('las2peer_user1.name')}.xml;${project.property('las2peer_user1.password')}
agent-user-${project.property('las2peer_user2.name')}.xml;${project.property('las2peer_user2.password')}
agent-user-${project.property('las2peer_user3.name')}.xml;${project.property('las2peer_user3.password')}
        """
    }
}

task deleteStartup {

        file("$rootDir/etc/startup").deleteDir()
    
}

build.dependsOn "deleteStartup"

build.dependsOn "generateAgents"

clean.doLast {
    file("$rootDir/tmp").deleteDir()
    file("$rootDir/lib").deleteDir()
    file("$rootDir/servicebundle").deleteDir()
    file("$rootDir/service").deleteDir()
    file("$rootDir/etc/startup").deleteDir()
    file("$projectDir/export").deleteDir()
}

task cleanAll {
    dependsOn "clean"

    doLast {
        file("$rootDir/log").deleteDir()
        file("$rootDir/node-storage").deleteDir()
    }
}

jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = file("$projectDir/export/jacoco")
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run

    jacoco {
        destinationFile = file("$projectDir/export/jacoco.exec")
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    // enable the xml report (html is also enabled)
    reports {
        xml.enabled true
    }
}

// configuration for eclipse (this allows to import the template project as a gradle project in eclipse without any problems)
eclipse {
    classpath {
      file {
            whenMerged {
                // change output directory for test, main, resources and default
                def main = entries.find { it.path == "src/main/java" }
                main.output = "output/main"

                def test = entries.find { it.path == "src/test/java" }
                test.output = "output/test"

                def defaultEntry = entries.find { it.kind == "output" && it.path == "bin/default" }
                defaultEntry.path = "output/default"
            }
        }
    }
}